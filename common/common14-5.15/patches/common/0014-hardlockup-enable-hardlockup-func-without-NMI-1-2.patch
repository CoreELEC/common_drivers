From 6692622b1e5dac565d3200f31c8ca4f4f223e18c Mon Sep 17 00:00:00 2001
From: "song.han" <song.han@amlogic.com>
Date: Thu, 24 Feb 2022 15:04:33 +0800
Subject: [PATCH 14/95] hardlockup: enable hardlockup func without NMI [1/2]

PD#SWPL-72675

Problem:
porting hardlockup without nmi support.

Solution:
port hardlockup func from 5.4.

Verify:
C2-AF400

Change-Id: I49538747eab546105d3daac472805009ce0dec53
Signed-off-by: song.han <song.han@amlogic.com>
---
 drivers/tty/sysrq.c | 24 +++++++++++++++++++++++-
 kernel/watchdog.c   | 14 +++++++++++++-
 2 files changed, 36 insertions(+), 2 deletions(-)

diff --git a/drivers/tty/sysrq.c b/drivers/tty/sysrq.c
index 07c33c20f62a..9c2e10d0e345 100644
--- a/drivers/tty/sysrq.c
+++ b/drivers/tty/sysrq.c
@@ -165,6 +165,26 @@ static const struct sysrq_key_op sysrq_crash_op = {
 	.enable_mask	= SYSRQ_ENABLE_DUMP,
 };
 
+#ifdef CONFIG_AMLOGIC_DEBUG_LOCKUP
+static DEFINE_SPINLOCK(wdt_lock);
+static void sysrq_handle_wdt_sw_rst(int key)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&wdt_lock, flags);
+	while (1)
+		;
+	/* wait for wdt fiq to kick in. */
+}
+
+static struct sysrq_key_op sysrq_wdt_sw_op = {
+	.handler        = sysrq_handle_wdt_sw_rst,
+	.help_msg       = "dis intr to trigger wdt rst(x)",
+	.action_msg     = "Trigger a sw wdt reset",
+	.enable_mask    = SYSRQ_ENABLE_DUMP,
+};
+#endif
+
 static void sysrq_handle_reboot(int key)
 {
 	lockdep_off();
@@ -504,7 +524,9 @@ static const struct sysrq_key_op *sysrq_key_table[62] = {
 	/* x: May be registered on mips for TLB dump */
 	/* x: May be registered on ppc/powerpc for xmon */
 	/* x: May be registered on sparc64 for global PMU dump */
-	NULL,				/* x */
+#ifdef CONFIG_AMLOGIC_DEBUG_LOCKUP
+	&sysrq_wdt_sw_op,				/* x */
+#endif
 	/* y: May be registered on sparc64 for global register dump */
 	NULL,				/* y */
 	&sysrq_ftrace_dump_op,		/* z */
diff --git a/kernel/watchdog.c b/kernel/watchdog.c
index 2b1c9d202f92..4a6ab84ab307 100644
--- a/kernel/watchdog.c
+++ b/kernel/watchdog.c
@@ -181,8 +181,14 @@ static DEFINE_PER_CPU(unsigned long, watchdog_touch_ts);
 static DEFINE_PER_CPU(unsigned long, watchdog_report_ts);
 static DEFINE_PER_CPU(struct hrtimer, watchdog_hrtimer);
 static DEFINE_PER_CPU(bool, softlockup_touch_sync);
+#ifdef CONFIG_AMLOGIC_DEBUG_LOCKUP
+DEFINE_PER_CPU(unsigned long, hrtimer_interrupts);
+DEFINE_PER_CPU(unsigned long, hrtimer_interrupts_saved);
+extern void watchdog_check_hardlockup_other_cpu(void);
+#else
 static DEFINE_PER_CPU(unsigned long, hrtimer_interrupts);
 static DEFINE_PER_CPU(unsigned long, hrtimer_interrupts_saved);
+#endif
 static unsigned long soft_lockup_nmi_warn;
 
 static int __init nowatchdog_setup(char *str)
@@ -359,13 +365,16 @@ static enum hrtimer_restart watchdog_timer_fn(struct hrtimer *hrtimer)
 	struct pt_regs *regs = get_irq_regs();
 	int duration;
 	int softlockup_all_cpu_backtrace = sysctl_softlockup_all_cpu_backtrace;
-
 	if (!watchdog_enabled)
 		return HRTIMER_NORESTART;
 
 	/* kick the hardlockup detector */
 	watchdog_interrupt_count();
 
+#ifdef CONFIG_AMLOGIC_DEBUG_LOCKUP
+	/* test for hardlockups on the next cpu */
+	watchdog_check_hardlockup_other_cpu();
+#endif
 	/* kick the softlockup detector */
 	if (completion_done(this_cpu_ptr(&softlockup_completion))) {
 		reinit_completion(this_cpu_ptr(&softlockup_completion));
@@ -474,6 +483,9 @@ static void watchdog_enable(unsigned int cpu)
 	/* Enable the perf event */
 	if (watchdog_enabled & NMI_WATCHDOG_ENABLED)
 		watchdog_nmi_enable(cpu);
+#ifdef CONFIG_AMLOGIC_DEBUG_LOCKUP
+	watchdog_nmi_enable(cpu);
+#endif
 }
 
 static void watchdog_disable(unsigned int cpu)
-- 
2.25.1

