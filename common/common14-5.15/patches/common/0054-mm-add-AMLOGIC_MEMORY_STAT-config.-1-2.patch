From 7d4d378bb32c3656bf46bd848b61983dcb49506f Mon Sep 17 00:00:00 2001
From: Jianxiong Pan <jianxiong.pan@amlogic.com>
Date: Wed, 14 Sep 2022 17:36:22 +0800
Subject: [PATCH 54/95] mm: add AMLOGIC_MEMORY_STAT config. [1/2]

PD#SWPL-94445

Problem:
fix gki break.

Solution:
modify the config to meet gki format.

Verify:
sc2_ah212.

Change-Id: I77652943be5f20612842603b3159aeaae67ff0b0
Signed-off-by: Jianxiong Pan <jianxiong.pan@amlogic.com>
---
 include/linux/mmzone.h |  4 ++--
 mm/page_alloc.c        | 18 +++++++++---------
 2 files changed, 11 insertions(+), 11 deletions(-)

diff --git a/include/linux/mmzone.h b/include/linux/mmzone.h
index 60612b070b00..b08772431e96 100644
--- a/include/linux/mmzone.h
+++ b/include/linux/mmzone.h
@@ -106,12 +106,12 @@ extern int page_group_by_mobility_disabled;
 struct free_area {
 	struct list_head	free_list[MIGRATE_TYPES];
 	unsigned long		nr_free;
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 	unsigned long           free_mt[MIGRATE_TYPES];
 #endif
 };
 
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 void count_free_migrate(struct free_area *area, struct page *page,
 			struct list_head *list, int op);
 #define FREE_LIST_ADD	0
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index 941152e75a63..57e3e266c33b 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -983,7 +983,7 @@ static inline void add_to_free_list(struct page *page, struct zone *zone,
 
 	list_add(&page->lru, &area->free_list[migratetype]);
 	area->nr_free++;
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 	count_free_migrate(area, page,
 		&area->free_list[migratetype], FREE_LIST_ADD);
 #endif
@@ -997,7 +997,7 @@ static inline void add_to_free_list_tail(struct page *page, struct zone *zone,
 
 	list_add_tail(&page->lru, &area->free_list[migratetype]);
 	area->nr_free++;
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 	count_free_migrate(area, page,
 		&area->free_list[migratetype], FREE_LIST_ADD);
 #endif
@@ -1014,7 +1014,7 @@ static inline void move_to_free_list(struct page *page, struct zone *zone,
 	struct free_area *area = &zone->free_area[order];
 
 	list_move_tail(&page->lru, &area->free_list[migratetype]);
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 	count_free_migrate(area, page,
 		&area->free_list[migratetype], FREE_LIST_MOVE);
 #endif
@@ -1031,7 +1031,7 @@ static inline void del_page_from_free_list(struct page *page, struct zone *zone,
 	__ClearPageBuddy(page);
 	set_page_private(page, 0);
 	zone->free_area[order].nr_free--;
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 	count_free_migrate(&zone->free_area[order], page, NULL, FREE_LIST_RM);
 #endif
 }
@@ -6389,7 +6389,7 @@ void show_free_areas(unsigned int filter, nodemask_t *nodemask)
 		unsigned int order;
 		unsigned long nr[MAX_ORDER], flags, total = 0;
 		unsigned char types[MAX_ORDER];
-	#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+	#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 		unsigned long free_mt[MIGRATE_TYPES] = {0};
 	#endif
 
@@ -6408,7 +6408,7 @@ void show_free_areas(unsigned int filter, nodemask_t *nodemask)
 
 			types[order] = 0;
 			for (type = 0; type < MIGRATE_TYPES; type++) {
-			#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+			#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 				free_mt[type] += (area->free_mt[type] << order);
 			#endif
 				if (!free_area_empty(area, type))
@@ -6423,7 +6423,7 @@ void show_free_areas(unsigned int filter, nodemask_t *nodemask)
 				show_migration_types(types[order]);
 		}
 		printk(KERN_CONT "= %lukB\n", K(total));
-	#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+	#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 		for (order = 0; order < MIGRATE_TYPES; order++) {
 			pr_info("Free_%s:%ld\n", migratetype_names[order],
 					free_mt[order]);
@@ -9872,7 +9872,7 @@ bool take_page_off_buddy(struct page *page)
 }
 #endif
 
-#ifdef CONFIG_AMLOGIC_MEMORY_EXTEND
+#ifdef CONFIG_AMLOGIC_MEMORY_STAT
 void count_free_migrate(struct free_area *area, struct page *page,
 			struct list_head *list, int op)
 {
@@ -9905,7 +9905,7 @@ void count_free_migrate(struct free_area *area, struct page *page,
 		break;
 	}
 }
-#endif /* CONFIG_AMLOGIC_MEMORY_EXTEND */
+#endif /* CONFIG_AMLOGIC_MEMORY_STAT */
 
 #ifdef CONFIG_ZONE_DMA
 bool has_managed_dma(void)
-- 
2.25.1

