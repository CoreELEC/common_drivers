From f57b3909e375f59ffd96ac0e0e6f2d77e76f2547 Mon Sep 17 00:00:00 2001
From: Hanjie Lin <hanjie.lin@amlogic.com>
Date: Wed, 19 Apr 2023 17:41:08 +0800
Subject: [PATCH] smp: add APU support [1/2]

PD#SWPL-119162

Problem:
APU should not be seen except audio

Solution:
add APU support

Verify:
t5m

Change-Id: I03828c60962a16cdf801c8ddabeb7e05b4a4f232
Signed-off-by: Hanjie Lin <hanjie.lin@amlogic.com>
---
 arch/arm64/kernel/cpuinfo.c |  7 ++++++
 arch/arm64/kernel/smp.c     | 45 +++++++++++++++++++++++++++++++++++++
 drivers/base/cpu.c          |  9 ++++++++
 drivers/of/base.c           |  5 +++++
 fs/proc/base.c              | 14 ++++++++++++
 fs/proc/stat.c              |  8 +++++++
 include/linux/smp.h         |  6 +++++
 kernel/smp.c                | 19 ++++++++++++++++
 kernel/trace/trace.c        | 16 +++++++++++++
 9 files changed, 129 insertions(+)

diff --git a/arch/arm64/kernel/cpuinfo.c b/arch/arm64/kernel/cpuinfo.c
index e1e727899821..0db2edf4d35d 100644
--- a/arch/arm64/kernel/cpuinfo.c
+++ b/arch/arm64/kernel/cpuinfo.c
@@ -162,6 +162,10 @@ static int c_show(struct seq_file *m, void *v)
 		struct cpuinfo_arm64 *cpuinfo = &per_cpu(cpu_data, i);
 		u32 midr = cpuinfo->reg_midr;
 
+#ifdef CONFIG_AMLOGIC_APU
+		if (apu_enable && i == apu_id)
+			continue;
+#endif
 		/*
 		 * glibc reads /proc/cpuinfo to determine the number of
 		 * online processors, looking for lines beginning with
@@ -361,6 +365,9 @@ static void cpuinfo_detect_icache_policy(struct cpuinfo_arm64 *info)
 		break;
 	}
 
+#ifdef CONFIG_AMLOGIC_APU
+	if (!(apu_enable && cpu == apu_id))
+#endif
 	pr_info("Detected %s I-cache on CPU%d\n", icache_policy_str(l1ip), cpu);
 }
 
diff --git a/arch/arm64/kernel/smp.c b/arch/arm64/kernel/smp.c
index 764511be78e7..a28a9152add2 100644
--- a/arch/arm64/kernel/smp.c
+++ b/arch/arm64/kernel/smp.c
@@ -262,6 +262,9 @@ asmlinkage notrace void secondary_start_kernel(void)
 	 * the CPU migration code to notice that the CPU is online
 	 * before we continue.
 	 */
+#ifdef CONFIG_AMLOGIC_APU
+	if (!(apu_enable && cpu == apu_id))
+#endif
 	pr_info("CPU%u: Booted secondary processor 0x%010lx [0x%08x]\n",
 					 cpu, (unsigned long)mpidr,
 					 read_cpuid_id());
@@ -447,7 +450,15 @@ static void __init hyp_mode_check(void)
 
 void __init smp_cpus_done(unsigned int max_cpus)
 {
+#ifdef CONFIG_AMLOGIC_APU
+	int num = num_online_cpus();
+
+	if (apu_id != -1)
+		num -= 1;
+	pr_info("SMP: Total of %d processors activated.\n", num);
+#else
 	pr_info("SMP: Total of %d processors activated.\n", num_online_cpus());
+#endif
 	setup_cpu_features();
 	hyp_mode_check();
 	apply_alternatives_all();
@@ -666,10 +677,34 @@ static void __init acpi_parse_and_init_cpus(void)
 static void __init of_parse_and_init_cpus(void)
 {
 	struct device_node *dn;
+#ifdef CONFIG_AMLOGIC_APU
+	struct device_node *cpus;
+	int ret = 0;
+
+	cpus = of_find_node_by_path("/cpus");
+	ret |= of_property_read_u32(cpus, "apu_id", &apu_id);
+	ret |= of_property_read_u32(cpus, "apu_hwid", &apu_hwid);
+
+	if (ret) {
+		apu_id = -1;
+		apu_hwid = -1;
+		pr_info("no apu_id or apu_hwid\n");
+	}
+#endif
 
 	for_each_of_cpu_node(dn) {
 		u64 hwid = of_get_cpu_mpidr(dn);
 
+#ifdef CONFIG_AMLOGIC_APU
+		if (cpu_count == apu_id) {
+			set_cpu_logical_map(cpu_count, apu_hwid);
+			early_map_cpu_to_node(cpu_count, 0);
+			cpu_count++;
+			pr_info("apu_enable:%d apu_id:%x apu_hwid:%x active\n",
+				apu_enable, apu_id, apu_hwid);
+		}
+#endif
+
 		if (hwid == INVALID_HWID)
 			goto next;
 
@@ -714,6 +749,16 @@ static void __init of_parse_and_init_cpus(void)
 next:
 		cpu_count++;
 	}
+
+#ifdef CONFIG_AMLOGIC_APU
+	if (cpu_count == apu_id) {
+		set_cpu_logical_map(cpu_count, apu_hwid);
+		early_map_cpu_to_node(cpu_count, 0);
+		cpu_count++;
+		pr_info("apu_enable:%d apu_id:%x apu_hwid:%x active\n",
+			apu_enable, apu_id, apu_hwid);
+	}
+#endif
 }
 
 /*
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index 55405ebf23ab..ed0e67dd9b5b 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -209,6 +209,15 @@ static ssize_t show_cpus_attr(struct device *dev,
 {
 	struct cpu_attr *ca = container_of(attr, struct cpu_attr, attr);
 
+#ifdef CONFIG_AMLOGIC_APU
+	struct cpumask mask;
+
+	if (apu_enable && apu_id != -1) {
+		cpumask_copy(&mask, ca->map);
+		cpumask_clear_cpu(apu_id, &mask);
+		return cpumap_print_to_pagebuf(true, buf, &mask);
+	}
+#endif
 	return cpumap_print_to_pagebuf(true, buf, ca->map);
 }
 
diff --git a/drivers/of/base.c b/drivers/of/base.c
index 54719f8156ed..695ad7531974 100644
--- a/drivers/of/base.c
+++ b/drivers/of/base.c
@@ -382,10 +382,15 @@ struct device_node *of_get_cpu_node(int cpu, unsigned int *thread)
 {
 	struct device_node *cpun;
 
+#ifdef CONFIG_AMLOGIC_APU
+	if (cpu == apu_id)
+		cpu -= 1;
+#endif
 	for_each_of_cpu_node(cpun) {
 		if (arch_find_n_match_cpu_physical_id(cpun, cpu, thread))
 			return cpun;
 	}
+
 	return NULL;
 }
 EXPORT_SYMBOL(of_get_cpu_node);
diff --git a/fs/proc/base.c b/fs/proc/base.c
index 01825cba84aa..93c4689773b5 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -3496,6 +3496,13 @@ int proc_pid_readdir(struct file *file, struct dir_context *ctx)
 		char name[10 + 1];
 		unsigned int len;
 
+#ifdef CONFIG_AMLOGIC_APU
+		if (apu_enable && apu_id != -1 &&
+		    iter.task->nr_cpus_allowed == 1 &&
+		    cpumask_test_cpu(apu_id, &iter.task->cpus_mask))
+			continue;
+#endif
+
 		cond_resched();
 		if (!has_pid_permissions(fs_info, iter.task, HIDEPID_INVISIBLE))
 			continue;
@@ -3841,6 +3848,13 @@ static int proc_task_readdir(struct file *file, struct dir_context *ctx)
 		unsigned int len;
 		tid = task_pid_nr_ns(task, ns);
 		len = snprintf(name, sizeof(name), "%u", tid);
+
+#ifdef CONFIG_AMLOGIC_APU
+		if (apu_enable && apu_id != -1 &&
+		    task->nr_cpus_allowed == 1 &&
+		    cpumask_test_cpu(apu_id, &task->cpus_mask))
+			continue;
+#endif
 		if (!proc_fill_cache(file, ctx, name, len,
 				proc_task_instantiate, task, NULL)) {
 			/* returning this tgid failed, save it as the first
diff --git a/fs/proc/stat.c b/fs/proc/stat.c
index 4fb8729a68d4..8af42997f3ba 100644
--- a/fs/proc/stat.c
+++ b/fs/proc/stat.c
@@ -126,6 +126,10 @@ static int show_stat(struct seq_file *p, void *v)
 		struct kernel_cpustat kcpustat;
 		u64 *cpustat = kcpustat.cpustat;
 
+#ifdef CONFIG_AMLOGIC_APU
+		if (apu_enable && i == apu_id)
+			continue;
+#endif
 		kcpustat_cpu_fetch(&kcpustat, i);
 
 		user		+= cpustat[CPUTIME_USER];
@@ -166,6 +170,10 @@ static int show_stat(struct seq_file *p, void *v)
 		struct kernel_cpustat kcpustat;
 		u64 *cpustat = kcpustat.cpustat;
 
+#ifdef CONFIG_AMLOGIC_APU
+		if (apu_enable && i == apu_id)
+			continue;
+#endif
 		kcpustat_cpu_fetch(&kcpustat, i);
 
 		/* Copy values here to work around gcc-2.95.3, gcc-2.96 */
diff --git a/include/linux/smp.h b/include/linux/smp.h
index 510519e8a1eb..88bbeef82037 100644
--- a/include/linux/smp.h
+++ b/include/linux/smp.h
@@ -287,4 +287,10 @@ int smpcfd_prepare_cpu(unsigned int cpu);
 int smpcfd_dead_cpu(unsigned int cpu);
 int smpcfd_dying_cpu(unsigned int cpu);
 
+#ifdef CONFIG_AMLOGIC_APU
+extern int apu_id;
+extern int apu_hwid;
+extern int apu_enable;
+#endif
+
 #endif /* __LINUX_SMP_H */
diff --git a/kernel/smp.c b/kernel/smp.c
index 82825345432c..d950c597b3fc 100644
--- a/kernel/smp.c
+++ b/kernel/smp.c
@@ -1093,6 +1093,10 @@ void __init smp_init(void)
 
 	num_nodes = num_online_nodes();
 	num_cpus  = num_online_cpus();
+#ifdef CONFIG_AMLOGIC_APU
+	if (apu_enable && apu_id != -1)
+		num_cpus -= 1;
+#endif
 	pr_info("Brought up %d node%s, %d CPU%s\n",
 		num_nodes, (num_nodes > 1 ? "s" : ""),
 		num_cpus,  (num_cpus  > 1 ? "s" : ""));
@@ -1237,3 +1241,18 @@ int smp_call_on_cpu(unsigned int cpu, int (*func)(void *), void *par, bool phys)
 	return sscs.ret;
 }
 EXPORT_SYMBOL_GPL(smp_call_on_cpu);
+
+#ifdef CONFIG_AMLOGIC_APU
+int apu_id = -1;
+int apu_hwid = -1;
+int apu_enable = 1;
+
+static int __init setup_apu_enable(char *str)
+{
+	get_option(&str, &apu_enable);
+	pr_debug("set apu_enable=%d\n", apu_enable);
+	return 0;
+}
+
+early_param("apu_enable", setup_apu_enable);
+#endif
diff --git a/kernel/trace/trace.c b/kernel/trace/trace.c
index c29f3b6b452e..e116651b51e8 100644
--- a/kernel/trace/trace.c
+++ b/kernel/trace/trace.c
@@ -5151,6 +5151,11 @@ int tracing_set_cpumask(struct trace_array *tr,
 	if (!tr)
 		return -EINVAL;
 
+#ifdef CONFIG_AMLOGIC_APU
+	if (apu_enable && apu_id != -1)
+		cpumask_clear_cpu(apu_id, tracing_cpumask_new);
+#endif
+
 	local_irq_disable();
 	arch_spin_lock(&tr->max_lock);
 	for_each_tracing_cpu(cpu) {
@@ -8691,6 +8696,11 @@ tracing_init_tracefs_percpu(struct trace_array *tr, long cpu)
 	if (!d_percpu)
 		return;
 
+#ifdef CONFIG_AMLOGIC_APU
+	if (apu_enable && cpu == apu_id)
+		return;
+#endif
+
 	snprintf(cpu_dir, 30, "cpu%ld", cpu);
 	d_cpu = tracefs_create_dir(cpu_dir, d_percpu);
 	if (!d_cpu) {
@@ -10161,6 +10171,12 @@ __init static int tracer_alloc_buffers(void)
 
 	cpumask_copy(tracing_buffer_mask, cpu_possible_mask);
 	cpumask_copy(global_trace.tracing_cpumask, cpu_all_mask);
+#ifdef CONFIG_AMLOGIC_APU
+	if (apu_enable && apu_id != -1) {
+		cpumask_clear_cpu(apu_id, tracing_buffer_mask);
+		cpumask_clear_cpu(apu_id, global_trace.tracing_cpumask);
+	}
+#endif
 
 	raw_spin_lock_init(&global_trace.start_lock);
 
-- 
2.29.0

