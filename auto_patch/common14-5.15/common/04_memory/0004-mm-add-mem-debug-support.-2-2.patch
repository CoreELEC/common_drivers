From bd98b3457330768bfebe76e897820581349161a8 Mon Sep 17 00:00:00 2001
From: Jianxiong Pan <jianxiong.pan@amlogic.com>
Date: Wed, 16 Feb 2022 12:31:12 +0800
Subject: [PATCH 04/11] mm: add mem debug support. [2/2]

PD#SWPL-72254

Problem:
No mem debug.

Solution:
porting it from 5.4.

Verify:
local.

Signed-off-by: Jianxiong Pan <jianxiong.pan@amlogic.com>
Change-Id: Ibdae855520510910e8f9a9dba9a469e0b46cc512
---
 arch/arm/mm/init.c   | 7 +++++++
 arch/arm64/mm/init.c | 6 ++++++
 fs/proc/task_mmu.c   | 5 +++++
 include/linux/mm.h   | 4 ++++
 4 files changed, 22 insertions(+)

diff --git a/arch/arm/mm/init.c b/arch/arm/mm/init.c
index 6162a070a410..6d04cb75d26b 100644
--- a/arch/arm/mm/init.c
+++ b/arch/arm/mm/init.c
@@ -41,6 +41,10 @@
 
 #include "mm.h"
 
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+#include <linux/amlogic/mem_debug.h>
+#endif
+
 #ifdef CONFIG_CPU_CP15_MMU
 unsigned long __init __clear_cr(unsigned long mask)
 {
@@ -331,6 +335,9 @@ void __init mem_init(void)
 
 	free_highpages();
 
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+	dump_mem_layout_boot_phase();
+#endif
 	/*
 	 * Check boundaries twice: Some fundamental inconsistencies can
 	 * be detected at build time already.
diff --git a/arch/arm64/mm/init.c b/arch/arm64/mm/init.c
index b96e61706a61..b2ce24086567 100644
--- a/arch/arm64/mm/init.c
+++ b/arch/arm64/mm/init.c
@@ -46,6 +46,9 @@
 #include <asm/alternative.h>
 #include <asm/xen/swiotlb-xen.h>
 
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+#include <linux/amlogic/mem_debug.h>
+#endif
 /*
  * We need to be able to catch inadvertent references to memstart_addr
  * that occur (potentially in generic code) before arm64_memblock_init()
@@ -430,6 +433,9 @@ void __init mem_init(void)
 	/* this will put all unused low memory onto the freelists */
 	memblock_free_all();
 
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+	dump_mem_layout_boot_phase();
+#endif
 	/*
 	 * Check boundaries twice: Some fundamental inconsistencies can be
 	 * detected at build time already.
diff --git a/fs/proc/task_mmu.c b/fs/proc/task_mmu.c
index 16a537a60c80..5772f8711ba2 100644
--- a/fs/proc/task_mmu.c
+++ b/fs/proc/task_mmu.c
@@ -1633,6 +1633,11 @@ static ssize_t pagemap_read(struct file *file, char __user *buf,
 
 	/* do not disclose physical addresses: attack vector */
 	pm.show_pfn = file_ns_capable(file, &init_user_ns, CAP_SYS_ADMIN);
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+	/* enable it if pagemap_enable() is true*/
+	if (!pm.show_pfn && pagemap_enabled())
+		pm.show_pfn = 1;
+#endif
 
 	pm.len = (PAGEMAP_WALK_SIZE >> PAGE_SHIFT);
 	pm.buffer = kmalloc_array(pm.len, PM_ENTRY_BYTES, GFP_KERNEL);
diff --git a/include/linux/mm.h b/include/linux/mm.h
index a9d1bfa9190e..83a1caf9f367 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -48,6 +48,10 @@ extern int sysctl_page_lock_unfairness;
 
 void init_mm_internals(void);
 
+#ifdef CONFIG_AMLOGIC_MEM_DEBUG
+int pagemap_enabled(void);
+#endif
+
 #ifndef CONFIG_NUMA		/* Don't use mapnrs, do it properly */
 extern unsigned long max_mapnr;
 
-- 
2.25.1

