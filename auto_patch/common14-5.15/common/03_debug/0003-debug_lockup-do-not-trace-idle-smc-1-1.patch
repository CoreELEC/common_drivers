From 13d997d73e5a82d1adfdd5c54348a90422032d28 Mon Sep 17 00:00:00 2001
From: "qiankun.wang" <qiankun.wang@amlogic.com>
Date: Thu, 11 May 2023 15:11:51 +0800
Subject: [PATCH] debug_lockup:add lockup support [1/1]

PD#SWPL-114632

Problem:
add lockup support

Solution:
add lockup support

Verify:
s4

Change-Id: I05a407250655338b7bd128ca918275331c040e52
Signed-off-by: qiankun.wang <qiankun.wang@amlogic.com>
---
 arch/arm/include/asm/irqflags.h   |  5 +++++
 arch/arm64/include/asm/irqflags.h |  5 +++++
 drivers/firmware/psci/psci.c      |  5 +++++
 include/linux/arm-smccc.h         | 12 ++++++++++++
 4 files changed, 27 insertions(+)

diff --git a/arch/arm/include/asm/irqflags.h b/arch/arm/include/asm/irqflags.h
index aeec7f24eb75..8cf7832721bf 100644
--- a/arch/arm/include/asm/irqflags.h
+++ b/arch/arm/include/asm/irqflags.h
@@ -6,6 +6,10 @@
 
 #include <asm/ptrace.h>
 
+#if IS_ENABLED(CONFIG_AMLOGIC_DEBUG) && !defined(SKIP_LOCKUP_CHECK) && (IS_ENABLED(CONFIG_AMLOGIC_BREAK_GKI_20) || defined(MODULE))
+#include <linux/amlogic/irqflags_debug_arm.h>
+#else
+
 /*
  * CPU interrupt mask handling.
  */
@@ -183,5 +187,6 @@ static inline int arch_irqs_disabled_flags(unsigned long flags)
 
 #include <asm-generic/irqflags.h>
 
+#endif /* CONFIG_AMLOGIC_DEBUG */
 #endif /* ifdef __KERNEL__ */
 #endif /* ifndef __ASM_ARM_IRQFLAGS_H */
diff --git a/arch/arm64/include/asm/irqflags.h b/arch/arm64/include/asm/irqflags.h
index b57b9b1e4344..5bcdba73e906 100644
--- a/arch/arm64/include/asm/irqflags.h
+++ b/arch/arm64/include/asm/irqflags.h
@@ -10,6 +10,10 @@
 #include <asm/ptrace.h>
 #include <asm/sysreg.h>
 
+#if IS_ENABLED(CONFIG_AMLOGIC_DEBUG) && !defined(SKIP_LOCKUP_CHECK) && (IS_ENABLED(CONFIG_AMLOGIC_BREAK_GKI_20) || defined(MODULE))
+#include <linux/amlogic/irqflags_debug_arm64.h>
+#else
+
 /*
  * Aarch64 has flags for masking: Debug, Asynchronous (serror), Interrupts and
  * FIQ exceptions, in the 'daif' register. We mask and unmask them in 'daif'
@@ -129,5 +133,6 @@ static inline void arch_local_irq_restore(unsigned long flags)
 
 	pmr_sync();
 }
+#endif /* CONFIG_AMLOGIC_DEBUG */
 
 #endif /* __ASM_IRQFLAGS_H */
diff --git a/drivers/firmware/psci/psci.c b/drivers/firmware/psci/psci.c
index b41cacaaf961..6f737bd787ff 100644
--- a/drivers/firmware/psci/psci.c
+++ b/drivers/firmware/psci/psci.c
@@ -130,7 +130,12 @@ static unsigned long __invoke_psci_fn_smc(unsigned long function_id,
 {
 	struct arm_smccc_res res;
 
+#if IS_ENABLED(CONFIG_AMLOGIC_BGKI_DEBUG_MISC)
+	/* idle smc will not return, do not trace it */
+	__arm_smccc_smc(function_id, arg0, arg1, arg2, 0, 0, 0, 0, &res, NULL);
+#else
 	arm_smccc_smc(function_id, arg0, arg1, arg2, 0, 0, 0, 0, &res);
+#endif
 	return res.a0;
 }
 
diff --git a/include/linux/arm-smccc.h b/include/linux/arm-smccc.h
index b23906d0652f..99b8b2aaa2a1 100644
--- a/include/linux/arm-smccc.h
+++ b/include/linux/arm-smccc.h
@@ -414,9 +414,21 @@ asmlinkage void __arm_smccc_hvc(unsigned long a0, unsigned long a1,
 			unsigned long a5, unsigned long a6, unsigned long a7,
 			struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
 
+/* gki mode build with module or buitlin mode */
+#if ((defined(CONFIG_AMLOGIC_DEBUG_MODULE) && defined(MODULE)) || (defined(CONFIG_AMLOGIC_DEBUG))) && (!defined(SKIP_LOCKUP_CHECK))
+void __arm_smccc_smc_glue(unsigned long a0, unsigned long a1,
+			unsigned long a2, unsigned long a3, unsigned long a4,
+			unsigned long a5, unsigned long a6, unsigned long a7,
+			struct arm_smccc_res *res, struct arm_smccc_quirk *quirk);
+
+#define arm_smccc_smc(...) __arm_smccc_smc_glue(__VA_ARGS__, NULL)
+
+#define arm_smccc_smc_quirk(...) __arm_smccc_smc_glue(__VA_ARGS__)
+#else
 #define arm_smccc_smc(...) __arm_smccc_smc(__VA_ARGS__, NULL)
 
 #define arm_smccc_smc_quirk(...) __arm_smccc_smc(__VA_ARGS__)
+#endif
 
 #define arm_smccc_hvc(...) __arm_smccc_hvc(__VA_ARGS__, NULL)
 
-- 
2.25.1

